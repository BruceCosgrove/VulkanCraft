#include "World.hpp"
#include "VulkanCraft/Rendering/BlockModel.hpp"

namespace vc
{
    World::World(BlockRegistry const& blocks)
        : m_Blocks(blocks)
    {

    }

    void World::OnUpdate(Timestep timestep, ChunkGenerator& chunkGenerator)
    {
        if (static bool loaded = false; not loaded)
        {
            loaded = true;
            auto chunksToLoad = std::to_array<ChunkPos>({
                {-2, 0, -2},
                {-1, 0, -2},
                {0, 0, -2},
                {1, 0, -2},

                {-2, 0, -1},
                {-1, 0, -1},
                {0, 0, -1},
                {1, 0, -1},

                {-2, 0, 0},
                {-1, 0, 0},
                {0, 0, 0},
                {1, 0, 0},

                {-2, 0, 1},
                {-1, 0, 1},
                {0, 0, 1},
                {1, 0, 1},
            });
            chunkGenerator.QueueChunkLoads(chunksToLoad);
        }

        chunkGenerator.ConsumeGeneratedChunks([this](std::shared_ptr<Chunk>&& chunk)
        {
            m_Chunks[chunk->GetPosition()] = std::move(chunk);
        });

        if (static bool loaded = false; not loaded)
        {
            if (not m_Chunks.empty())
            {
                loaded = true;
                ChunkPos chunkPos = m_Chunks.begin()->second->GetPosition();
                chunkGenerator.QueueChunkUnloads(std::span{&chunkPos, 1});
            }
        }
    }

    Chunk* World::GetChunk(ChunkPos chunkPos)
    {
        if (auto it = m_Chunks.find(chunkPos); it != m_Chunks.end())
            return it->second.get();
        return nullptr;
    }
}
